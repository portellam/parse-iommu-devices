#!/bin/false

#
# Filename:       xml_src
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# params (1/2)
#
  if [[ -z "${1}" ]]; then
    exit 1
  fi
  declare -g SOURCE_PATH="${1}"

#
# sources (1/2)
#
  source \
    "${SOURCE_PATH}datatype_src" \
    "${SOURCE_PATH}"

#
# params (2/2)
#
  if is_empty_string "${2}"; then
    exit 1
  fi

  declare -g XML_FILE="${2}"
  declare -g XML_ID_TAG="@id"

  declare -ag XML_KEYS_A=(
    "devices"
  )

  declare -Ag XML_KEYS_B=(
    [${XML_KEYS_A[0]}]="hardware"
  )

  declare -Ag XML_KEYS_C=(
    [${XML_KEYS_B[${XML_KEYS_A[0]}]}]="driver"
  )

#
# logic
#
  function get_bus_id_from_hardware_id
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -n reference="${1}"

    if is_empty_string "${2}"; then
      return 1
    fi

    local -r hardware_id="${2,,}"

    local -r bus_id_from_hardware_id="$( \
      lspci -n \
        | grep "${hardware_id}" \
        | head --lines 1 \
        | awk 'END {print $1}' \
    )"

    if is_empty_string "${bus_id_from_hardware_id}"; then
      return 1
    fi

    reference="${bus_id_from_hardware_id,,}"
    return 0
  }

  function get_key_at_index
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -n reference="${1}"
    local -ir min_index=0
    local -i index="${min_index}"

    if is_empty_string "${2}"; then
      index="${2}"
    fi

    if [[ "${index}" -lt "${min_index}" ]] \
      || ! is_positive_integer "${index}"; then
      return 1
    fi

    shift
    shift

    if is_empty_string "${@}"; then
      return 1
    fi

    local -r get_key="$( \
      echo -e "${@}" \
        | grep --invert-match "^[@]" \
        | tail +${index} \
        | head --lines 1
    )"

    if is_empty_string "${get_key}"; then
      return 1
    fi

    reference="${get_key}"
  }

  function get_driver_from_hardware_id
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -n reference="${1}"

    if is_empty_string "${2}"; then
      return 1
    fi

    local -r hardware_index="${2}"
    local bus_id=""

    get_bus_id_from_hardware_id \
      "bus_id" \
      "${hardware_index}"

    local driver_from_hardware_id="$( \
      lspci -kns "${bus_id}" \
        | grep driver \
        | awk 'END {print $5}'
    )"

    if is_empty_string "${driver_from_hardware_id}"; then
      return 1
    fi

    reference="${driver_from_hardware_id,,}"
    return 0
  }

  function get_driver_from_driver_index
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -n reference="${1}"

    if is_empty_string "${2}"; then
      return 1
    fi

    local -r hardware_index="${2}"

    if ! is_positive_integer "${3}"; then
      return 1
    fi

    local -i driver_id="${3}"
    local -r key_a="${XML_KEYS_A[0]}"
    local -r key_b="${XML_KEYS_B["${key_a}"]}"
    local -r key_c="${XML_KEYS_C["${key_b}"]}"

    local xml_path="//xml/${key_a}/${key_b}[${XML_ID_TAG}=\"${hardware_index}\"]"
    xml_path+="/${key_c}[${XML_ID_TAG}=\"${driver_id}\"]"

    local -r driver_from_driver_index="$(
      xmlstarlet sel --template --value-of "${xml_path}" "${XML_FILE}" \
        | head --lines 1
    )"

    if is_empty_string "${driver_from_driver_index}"; then
      return 1
    fi

    reference="${driver_from_driver_index,,}"
  }

  function get_driver_from_hardware_index
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -n reference="${1}"

    if is_empty_string "${2}"; then
      return 1
    fi

    local -r hardware_index="${2}"
    local driver_from_hardware_index=""
    get_driver_from_hardware_id "driver_from_hardware_index" "${hardware_index}"

    if is_empty_string "${driver_from_hardware_index}" \
      || [[ "${driver_from_hardware_index}" =~ "stub" ]] \
      || [[ "${driver_from_hardware_index}" =~ "vfio" ]]; then
      local -ir driver_index="${3}"

      get_driver_from_driver_index \
        "driver_from_hardware_index" "${hardware_index}" "${driver_index}"

      if is_empty_string "${driver_from_hardware_index}"; then
        return 1
      fi
    fi

    reference="${driver_from_hardware_index,,}"
    return 0
  }