#!/bin/false

#
# Filename:       xml_src
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# params (1/2)
#
  if [[ -z "${1}" ]]; then
    exit 1
  fi

  declare -g SOURCE_PATH="${1}"

#
# sources (1/2)
#
  source \
    "${SOURCE_PATH}datatype_src" \
    "${SOURCE_PATH}"

#
# params (2/2)
#
  if is_empty_string "${2}"; then
    exit 1
  fi

  declare -g XML_FILE="${2}"
  declare -g ROOT_KEY="xml"
  declare -g KEY_A="devices"
  declare -g KEY_B="hardware"
  declare -g KEY_C="driver"
  declare -g ATTRIBUTE="@id"

  declare -ag XML_KEYS_A=(
    "devices"
  )

  declare -Ag XML_KEYS_B=(
    [${XML_KEYS_A[0]}]="hardware"
  )

  declare -Ag XML_KEYS_C=(
    [${XML_KEYS_B[${XML_KEYS_A[0]}]}]="driver"
  )

#
# logic
#
  function append_key_b
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -r attribute_value_b="${1}"

    if is_empty_string "${2}"; then
      return 1
    fi

    local -r value_c="${2}"

    xmlstarlet edit \
      --subnode "/${KEY_A}" \
        --type --nl "/${KEY_B}" \
          --value "" \
          --insert "/${ROOT_KEY}/${KEY_A}/${KEY_B}[last()]" \
        --type --nl "${KEY_C}" \
          --value "${attribute_value_b}" \
          --append "/${ROOT_KEY}/${KEY_A}/${KEY_B}[last()]" \
            --insert "${ATTRIBUTE}" \
            --value "${value_c}" \
      "${XML_FILE}"
  }

  function delete_key_b
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -r attribute_value_b="${1}"

    xmlstarlet edit \
      --delete "/${ROOT_KEY}/${KEY_A}/${KEY_B}[${ATTRIBUTE}='${attribute_value_b}']" \
      "${XML_FILE}"
  }

  function delete_key_c
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -r attribute_value_b="${1}"

    if is_empty_string "${2}"; then
      return 1
    fi

    local -r value_c="${2}"

    xmlstarlet edit \
      --delete "/${ROOT_KEY}/${KEY_A}/${KEY_B}[${ATTRIBUTE}='${attribute_value_b}']/${KEY_C}" \
          --value "${value_c}" --nl \
      "${XML_FILE}"
  }

  function modify_key_b_list
  {
    if ! is_boolean "${1}"; then
      return 1
    fi

    local do_cleanup_xml="${1}"
    shift
    local -ar key_b_list="${@}"

    for key_b in $( get_key_b_list ); do
      if echo "${key_b_list[@]}" \
        | grep --quiet "${key_b}"; then
        continue
      fi

      if "${do_cleanup_xml}" \
        && ! append_key_b "${key_b}"; then
        return 1
      fi
    done

    local -a current_key_b_list="$( get_key_b_list )"

    for key_b in "${key_b_list[@]}"; do
      if echo "${current_key_b_list[@]}" \
        | grep --quiet "${key_b}"; then
        continue
      fi

      if ! delete_key_b "${key_b}"; then
        return 1
      fi
    done

    return 0
  }

  function modify_key_c_list
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local key_b="${1}"
    shift
    local -ar key_c_list="${@}"

    for key_c in $( get_key_c_list "${key_b}" ); do
      if echo "${key_c_list[@]}" \
        | grep --quiet "${key_c}"; then
        continue
      fi

      if ! insert_key_c "${key_c}"; then
        return 1
      fi
    done

    local -a current_key_c_list="$( get_key_c_list "${key_b}" )"

    for key_c in "${key_c_list[@]}"; do
      if echo "${current_key_c_list[@]}" \
        | grep --quiet "${key_c}"; then
        continue
      fi

      if ! delete_key_c "${key_c}"; then
        return 1
      fi
    done

    return 0
  }

  function get_key_b_list
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -r attribute_value_b="${1}"

    xmlstarlet select \
      --template \
        --match "//${KEY_B}" \
          --value-of "${ATTRIBUTE}" --nl \
      "${XML_FILE}"
  }

  function get_key_c_list
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -r attribute_value_b="${1}"

    xmlstarlet select \
      --template \
        --match "//${KEY_B} [${ATTRIBUTE}=\"${attribute_value_b}\"]" \
        --match "//${KEY_C}" \
          --value-of "." --nl \
      "${XML_FILE}"
  }

  function get_key_c_at_index
  {
    if ! is_positive_integer "${2}"; then
      return 1
    fi

    local -i index="${2}"
    local -i count=0

    for key_c in $( get_key_c_list "${1}" ); do
      if [[ "${count}" -eq "${index}" ]]; then
        break
      fi

      (( index++ ))
    done

    echo "${key_c}"
  }

  function insert_key_c
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -r attribute_value_b="${1}"

    if is_empty_string "${2}"; then
      return 1
    fi

    local -r value_c="${2}"

    xmlstarlet edit \
      --update "/${ROOT_KEY}/${KEY_A}/${KEY_B}[${ATTRIBUTE}='${attribute_value_b}']" \
        --insert @version \
          --value "${value_c}" --nl \
      "${XML_FILE}"
  }

  function update_key_c
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -r attribute_value_b="${1}"

    if is_empty_string "${2}"; then
      return 1
    fi

    local -r value_c="${2}"

    xmlstarlet edit \
      --update "/${ROOT_KEY}/${KEY_A}/${KEY_B}[${ATTRIBUTE}='${attribute_value_b}']/${KEY_C}" \
          --value "${value_c}" --nl \
      "${XML_FILE}"
  }