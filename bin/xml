#!/bin/false

set -o xtrace

#
# params
#
  if [[ -z "${1}" ]]; then
    exit 1
  fi

  declare -gr XML_FILE="${1}"

  declare -ag XML_KEYS_A=(
    "devices"
  )

  declare -Ag XML_KEYS_B=(
    [${XML_KEYS_A[0]}]="hardware"
  )

  declare -Ag XML_KEYS_C=(
    [${XML_KEYS_B[${XML_KEYS_A[0]}]}]="@id,driver"
  )

  declare -Ag XML_KEYS_D=(
    [${XML_KEYS_C[${XML_KEYS_B[${XML_KEYS_A[0]}]}]}]="@id"
  )

#
# logic
#
  function get_bus_id_from_hardware_index
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -r hardware_index="${1}"

    if is_empty_string "${2}"; then
      return 1
    fi

    local -n reference="${2}"

    local get_bus_id="$( \
      lspci -n \
        | grep "${hardware_index}" \
        | head --lines 1 \
        | awk 'END {print $1}' \
    )"

    if is_empty_string "${get_bus_id}"; then
      return 1
    fi

    reference="${get_bus_id}"
    return 0
  }

  function get_attribute_at_index
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -n reference="${1}"
    local -ir min_index=0
    local -i index="${min_index}"

    if is_empty_string "${2}"; then
      index="${2}"
    fi

    if [[ "${index}" -lt "${min_index}" ]] \
      || ! is_positive_number "${index}"; then
      return 1
    fi

    shift
    shift

    if is_empty_string "${@}"; then
      return 1
    fi

    local -r get_attribute="$( \
      echo -e "${@}" \
        | grep "^[@]" \
        | tail +${index} \
        | head --lines 1
    )"

    if is_empty_string "${get_attribute}"; then
      return 1
    fi

    reference="${get_attribute}"
  }

  function get_key_at_index
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -n reference="${1}"
    local -ir min_index=0
    local -i index="${min_index}"

    if is_empty_string "${2}"; then
      index="${2}"
    fi

    if [[ "${index}" -lt "${min_index}" ]] \
      || ! is_positive_number "${index}"; then
      return 1
    fi

    shift
    shift

    if is_empty_string "${@}"; then
      return 1
    fi

    local -r get_key="$( \
      echo -e "${@}" \
        | grep --invert-match "^[@]" \
        | tail +${index} \
        | head --lines 1
    )"

    if is_empty_string "${get_key}"; then
      return 1
    fi

    reference="${get_key}"
  }

  function get_driver_at_index_from_hardware_index
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -r hardware_index="${1}"

    if is_empty_string "${2}"; then
      return 1
    fi

    local -n reference="${2}"
    local -ir min_index=0
    local -i driver_id="${min_index}"

    if is_empty_string "${driver_id}"; then
      driver_id="${3}"
    fi

    if [[ "${driver_id}" -lt "${min_index}" ]] \
      || ! is_positive_number "${driver_id}"; then
      return 1
    fi

    local -r drivers_tag="${XML_KEYS_A[0]}"
    local -r hardware_tag="${XML_KEYS_B[${drivers_tag}]}"
    local -r key_c="${XML_KEYS_C[${hardware_tag}]}"
    local key_c_list=()
    get_newline_list_from_comma_list "${key_c}" "key_c_list"
    IFS=$'\n'

    key_c_list="$( \
      echo -e "${key_c_list}" \
        | grep -i "^[@]"
    )"

    local hardware_id
    get_attribute_at_index "hardware_id" 1 "${key_c_list[@]}"
    local -r key_d="${XML_KEYS_D[${key_d}]}"
    local key_d_list=()
    get_newline_list_from_comma_list "${key_c}" "key_d_list"
    local driver_id
    get_attribute_at_index "driver_id" 1 "${key_d_list[@]}"
    unset IFS
    local -r driver_tag="driver"

    local get_driver="$(
      xmlstarlet sel -t --value-of \
        "/xml/${drivers_tag}/${hardware_tag}[${hardware_id}=\"${hardware_index}\"]/${driver_tag}[${driver_id}=\"${driver_id}\"]" \
        "${XML_FILE}" \
          | head --lines 1
    )"

    if is_empty_string "${get_driver}"; then
      return 1
    fi

    reference="${get_driver}"
  }

  function get_driver_from_hardware_index
  {
    if is_empty_string "${1}"; then
      return 1
    fi

    local -r hardware_index="${1}"

    if is_empty_string "${2}"; then
      return 1
    fi

    local -n reference="${2}"
    local bus_id=""

    get_bus_id_from_hardware_index \
      "${hardware_index}" \
      "bus_id"

    local get_driver="$( \
      lspci -kns "${bus_id}" \
        | grep driver \
        | awk 'END {print $5}'
    )"

    if [[ ! -z "${get_driver}" ]] \
      || ! [[ "${get_driver}" =~ "stub" ]] \
      || ! [[ "${get_driver}" =~ "vfio" ]]; then
      local -ir driver_index="${3}"

      get_driver="$( \
        get_driver_at_index_from_hardware_index \
          "${hardware_index}" "${driver_index}"
      )"
    fi

    if is_empty_string "${get_driver}"; then
      return 1
    fi

    reference="${get_driver}"
    return 0
  }

  function is_empty_string
  {
    if [[ -z "${1}" ]]; then
      return 1
    fi

    return 0
  }

  function is_positive_number
  {
    if is_empty_string "${1}" \
      || ! [[ "${1}" =~ ^[0-9]+$ ]] \
      || ! [[ "${1}" -lt 0 ]]; then
      return 1
    fi

    return 0
  }