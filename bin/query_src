#!/bin/false

#
# Filename:       query_src
# Description:    Populate variables with IOMMU groups' devices information.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] get driver from XML.
# - [ ] set (append, delete, insert) to XML:
#   - [ ] hardware id (optionally delete).
#   - [ ] driver.
# - [ ] passthrough XML file name.
# - [x] add time elapsed for all devices count.
#

#
# params (1/3)
#
  declare -g SOURCE_PATH="${1}"

#
# sources (1/2)
#
  source \
    "${SOURCE_PATH}datatype_src" \
    "${SOURCE_PATH}"

#
# params (2/3)
#
  declare -g XML_FILE="${2}"

#
# sources (2/2)
#
  source \
    "${SOURCE_PATH}xml_src" \
    "${SOURCE_PATH}" \
    "${XML_FILE}"

#
# params (3/3)
#
  function has_test_src_run_once
  {
    if "${TEST_SRC_RUN_ONCE}" &> /dev/null; then
      return 0
    fi

    declare -gr TEST_SRC_RUN_ONCE=true

    declare -agr LSPCI_OUTPUT_WITH_HARDWARE_ID="$( \
      lspci \
        -kn
    )"

    declare -agr LSPCI_OUTPUT_WITHOUT_HARDWARE_ID="$( \
      lspci \
        -m
    )"

    declare -ag BUS_ID_LIST=()

    declare -Ag \
      BUS_ID_AND_HARDWARE_ID \
      HARDWARE_ID_AND_DRIVER \
      HARDWARE_ID_AND_NAME \
      HARDWARE_ID_AND_TYPE \
      HARDWARE_ID_AND_VENDOR \
      IOMMU_GROUP_ID_AND_BUS_ID

    declare -gir MAX_IOMMU_GROUP_ID="$( \
      ls \
        /sys/kernel/iommu_groups/ \
      | sort \
        --reverse \
        --version-sort \
      | head \
        --lines \
          1 \
    )"

    declare -gr NULL_VALUE="N/A"

    if ! run_queries; then
      return 1
    fi

    declare -r \
      BUS_ID_LIST \
      BUS_ID_AND_HARDWARE_ID \
      HARDWARE_ID_AND_DRIVER \
      HARDWARE_ID_AND_NAME \
      HARDWARE_ID_AND_TYPE \
      HARDWARE_ID_AND_VENDOR \
      IOMMU_GROUP_ID_AND_BUS_ID

    return 0
  }

#
# logic
#
  function empty_dictionaries_and_lists
  {
    declare +r \
      BUS_ID_LIST \
      BUS_ID_AND_HARDWARE_ID \
      HARDWARE_ID_AND_DRIVER \
      HARDWARE_ID_AND_NAME \
      HARDWARE_ID_AND_TYPE \
      HARDWARE_ID_AND_VENDOR \
      IOMMU_GROUP_ID_AND_BUS_ID

    declare -ag BUS_ID_LIST=()

    declare -Ag \
      BUS_ID_AND_HARDWARE_ID \
      HARDWARE_ID_AND_DRIVER \
      HARDWARE_ID_AND_NAME \
      HARDWARE_ID_AND_TYPE \
      HARDWARE_ID_AND_VENDOR \
      IOMMU_GROUP_ID_AND_BUS_ID
  }

  function get_driver
  {
    if ! is_string "${1}"; then
      return 1
    fi

    local driver="$( \
      lspci \
        -kns \
          "${1}" \
      | grep \
        driver \
      | awk \
        'END {print $5}'
    )"

    if is_valid_driver "${driver}"; then
      echo "${driver}"
      return 0
    fi

    # get driver from xml

    if ! is_valid_driver "${driver}"; then
      driver="${NULL_VALUE}"
    fi

    echo "${driver}"
  }

  function is_valid_driver
  {
    if ! is_string "${1}" \
      || [[ "${1}" =~ "stub" ]] \
      || [[ "${1}" =~ "vfio" ]]; then
      return 1
    fi

    return 0
  }

  function prompt_time_duration
  {
    if ! is_positive_integer "${1}"; then
      return 1
    fi

    if ! is_string "${2}"; then
      return 1
    fi

    local -i total_time_in_seconds="$(( "${SECONDS}" - "${1}" ))"
    echo -en "${2} finished in about "

    if [[ "${total_time_in_seconds}" -lt 2 ]]; then
      total_time_in_seconds=1
      echo -e "${total_time_in_seconds} second."
    else
      echo -e "${total_time_in_seconds} seconds."
    fi

    return 0
  }

  function run_queries
  {
    if ! empty_dictionaries_and_lists \
      || ! set_many_iommu_group_id_dictionaries \
      || ! set_many_hardware_id_dictionaries; then
      return 1
    fi

    return 0
  }

  function set_many_hardware_id_dictionaries
  {
    if [[ "${#BUS_ID_LIST[@]}" -eq 0 ]]; then
      return 1
    fi

    echo -en "Parsing devices..."

    if is_readonly_variable "BUS_ID_AND_HARDWARE_ID" \
      || is_readonly_variable "IOMMU_GROUP_ID_AND_BUS_ID"; then
      echo -e " Skipped."
      return 1
    fi

    echo

    local -i start_time="${SECONDS}"

    for bus_id in "${BUS_ID_LIST[@]}"; do
      # echo -e "Parsing information for device ${bus_id}."

      set_this_hardware_id_dictionaries \
        "${bus_id}"
    done

    prompt_time_duration \
      "${start_time}" \
      "Parse of ${#BUS_ID_LIST[@]} devices"

    if [[ "${#BUS_ID_AND_HARDWARE_ID[@]}" -eq 0 ]]; then
      return 1
    fi
  }

  function set_many_iommu_group_id_dictionaries
  {
    local -ir start_time="${SECONDS}"

    echo -en "Parsing IOMMU groups..."

    if is_readonly_variable "BUS_ID_LIST" \
      || is_readonly_variable "HARDWARE_ID_AND_DRIVER" \
      || is_readonly_variable "HARDWARE_ID_AND_NAME" \
      || is_readonly_variable "HARDWARE_ID_AND_TYPE" \
      || is_readonly_variable "HARDWARE_ID_AND_VENDOR"; then
      echo -e " Skipped."
      return 1
    fi

    echo

    for iommu_group_id in $( \
      seq \
        0 \
        "${MAX_IOMMU_GROUP_ID}" \
    ); do
      # echo -e "Parsing devices for IOMMU group ${iommu_group_id}."
      set_this_iommu_group_id_dictionaries \
        "${iommu_group_id}"
    done

    prompt_time_duration \
      "${start_time}" \
      "Parse of ${MAX_IOMMU_GROUP_ID} IOMMU groups"

    if [[ "${#BUS_ID_LIST[@]}" -eq 0 ]] \
      || [[ "${#IOMMU_GROUP_ID_AND_BUS_ID[@]}" -eq 0 ]]; then
      return 1
    fi

    return 0
  }

  # given my machine, it takes ~7 seconds to populate all dictionaries.
  # with third implementation, lscpi is only parsed twice, as opposed to everytime.
  function set_this_hardware_id_dictionaries
  {
    if ! is_string "${1}"; then
      return 1
    fi

    ### 3

    # commenting out driver saves ~1 second.
    local driver="$( \
      get_driver \
        "${1}"
    )"

    local -r hardware_id="$( \
      echo \
        -e \
        "${LSPCI_OUTPUT_WITH_HARDWARE_ID}" \
      | \
        grep \
          "${1}" \
      | awk \
        'END {print $3}'
    )"

    local -r line="$( \
      echo \
        -e \
        "${LSPCI_OUTPUT_WITHOUT_HARDWARE_ID}" \
      | \
        grep \
          "${1}"
    )"

    local -r name="$( \
      echo \
        "${line}" \
      | cut \
        --delimiter \
          '"' \
        --fields \
          6 \
    )"

    local -r type="$( \
      echo \
        "${line}" \
      | cut \
        --delimiter \
          '"' \
        --fields \
          2 \
    )"

    local -r vendor="$( \
      echo \
        "${line}" \
      | cut \
        --delimiter \
          '"' \
        --fields \
          4 \
    )"

    ### 2

    # local -r hardware_id="$( \
    #   lspci \
    #     -ns \
    #       "${1}" \
    #   | awk \
    #     'END {print $3}' \
    # )"

    # local driver="$( \
    #   get_driver \
    #     "${1}"
    # )"

    # local -r line="$( \
    #   lspci \
    #     -ms \
    #       "${1}"
    # )"

    # local -r name="$( \
    #   echo \
    #     "${line}" \
    #   | cut \
    #     --delimiter \
    #       '"' \
    #     --fields \
    #       6 \
    # )"

    # local -r type="$( \
    #   echo \
    #     "${line}" \
    #   | cut \
    #     --delimiter \
    #       '"' \
    #     --fields \
    #       2 \
    # )"

    # local -r vendor="$( \
    #   echo \
    #     "${line}" \
    #   | cut \
    #     --delimiter \
    #       '"' \
    #     --fields \
    #       4 \
    # )"

    ### 1

    # local -r name="$( \
    #   lspci -ms "${1}" \
    #     | cut --delimiter '"' --fields 6 \
    # )"

    # local -r type="$( \
    #   lspci -ms "${1}" \
    #     | cut --delimiter '"' --fields 2 \
    # )"

    # local -r vendor="$( \
    #   lspci -ms "${1}" \
    #     | cut --delimiter '"' --fields 4 \
    # )"

    BUS_ID_AND_HARDWARE_ID["${1}"]="${hardware_id}"
    HARDWARE_ID_AND_DRIVER["${hardware_id}"]="${driver}"
    HARDWARE_ID_AND_NAME["${hardware_id}"]="${name}"
    HARDWARE_ID_AND_TYPE["${hardware_id}"]="${type}"
    HARDWARE_ID_AND_VENDOR["${hardware_id}"]="${vendor}"
    return 0
  }

  function set_this_iommu_group_id_dictionaries
  {
    for bus_id in $( \
      ls \
        "/sys/kernel/iommu_groups/${iommu_group_id}/devices/" \
      | sort \
        --version-sort \
    ); do
      bus_id="${bus_id:5}"

      BUS_ID_LIST+=( "${bus_id}" )
      IOMMU_GROUP_ID_AND_BUS_ID["${iommu_group_id}"]="${bus_id}"
    done
  }

#
# main
#
  has_test_src_run_once