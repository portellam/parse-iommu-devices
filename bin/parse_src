#!/bin/false

#
# Filename:       parse_src
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
#
# - [ ] vfio scan support.
# - [ ] import refactored logic.
#
#


# - [ ] add validation for all inputs.
# - [x] fix output to show every IOMMU group and it's device info.
# - [x] fix lists?
# - [ ] check if all commands used are installed.
# - [x] ignore groups with vfio.
# - [ ] xml file
#   - hardware ID as primary key.
#   - record one or more driver(s).
#   - if `lspcie` differs and is not binded to vfio, update or append.
#   - append new info.
#   - add functionality to sort by driver name?
#  - [ ] populate hardware_id and driver dictionary with xml output.
#  - [ ] replace args and output dict with standalone params.
#  - [ ] add to xml
#  - [ ] delete from xml
#  - [ ] update xml
#  - [ ] create xml
#  - [ ] get next valid value if current is not available (driver is not installed).
#  - [ ] make a command line operator.
#  - [ ] append usage
#  - use this script inside deploy-VFIO.
# - [ ] create logger.
#
# !!! - [ ] save entire lspcie output?

#
# TESTS:
# - [ ] all operators
#   - fix comma delimited lists for each match operator (works for first value).
#  - [ ] group match
#  - [ ] group reverse match
#  - [ ] less output
#  - [ ] min. output
#  - [ ] name match
#  - [x] name reverse match
#  - [x] type match
#  - [x] type reverse match
#  - [x] make match
#  - [x] make reverse match
#  - [ ] vga group index match
# - [ ] test with vfio setup.
#

#
# params (1/2)
#
  if [[ -z "${1}" ]]; then
    exit 1
  fi

  declare -g SOURCE_PATH="${1}"

#
# sources (1/2)
#
  source \
    "${SOURCE_PATH}datatype_src"

#
# params (2/2)
#
  if ! is_string "${2}"; then
    exit 1
  fi

  if ! is_string "${3}"; then
    exit 1
  fi

  declare -g SCRIPT_NAME="${2}"

  declare -gi COLUMN_SIZE="$( \
    tput \
      cols \
  )"

  declare -g LOG_EXTENSION=".log"

  declare -gA OUTPUT_DICT=(
    ["FOUND_GROUP_ID_LIST"]=""
    ["FOUND_HOST_GROUP_ID_LIST"]=""
    ["FOUND_HOST_AND_PCIE_GROUP_ID_LIST"]=""
    ["FOUND_PCIE_GROUP_ID_LIST"]=""
    ["FOUND_VGA_GROUP_ID_LIST"]=""
    ["SELECTED_DRIVER_LIST"]=""
    ["SELECTED_GROUP_ID_LIST"]=""
    ["SELECTED_HARDWARE_ID_LIST"]=""
    ["UNSELECTED_GROUP_ID_LIST"]=""
    ["FOUND_VFIO_GROUP_ID_LIST"]=""
  )


  declare -gr VFIO_DRIVER_LIST="pci-stub,vfio-pci"
  declare -gr VGA_TYPE_LIST="graphics,vga,video"

  declare -i MAX_VIDEO_IOMMU_GROUP_INDEX=0
  declare -ir MIN_VIDEO_IOMMU_GROUP_INDEX=1

#
# sources (2/2)
#
  source \
    "${SOURCE_PATH}file_src"

  source \
    "${SOURCE_PATH}print_src" \
    "${SOURCE_PATH}" \
    "${SCRIPT_NAME}${LOG_EXTENSION}" \
    "${COLUMN_SIZE}"

#
# logic
#
  function parse_src_main
  {
    local -a iommu_group_output_list=()
    local -a matched_iommu_group_id_list=()

    local -r message="Parsing hardware devices..."

    print_and_log_output \
      "${message}" \
      "${INPUT_DICT["VERBOSE_SINGLE"]}"

    if [[ "${#INPUT_LIST[@]}" -le 0 ]] \
      && ! match_all_iommu_groups; then
      print_and_log_output \
        "${message} Failed." \
        "${INPUT_DICT["VERBOSE_SINGLE"]}"

      return 1
    fi

    set_video_iommu_group_index_maximum
    parse_many_inputs
    format_many_outputs
    trim_many_output_lists
    sort_many_output_lists

    print_and_log_output \
      "${message} Successful.\n" \
      "${INPUT_DICT["VERBOSE_SINGLE"]}"

    print_many_output_lists
    return 0
  }

  function create_logfile
  {
    if [[ -e "${LOG_FILE}" ]] \
      && ! rm --force "${LOG_FILE}" &> /dev/null; then
      echo -e "Failed to delete logfile."
    fi

    if ! touch "${LOG_FILE}" &> /dev/null; then
      echo -e "Failed to create logfile."
    fi

    return 0
  }

  function format_many_outputs
  {
    for iommu_group_id in ${!matched_iommu_group_id_list[@]}; do
      local has_match=${matched_iommu_group_id_list["${iommu_group_id}"]}

      parse_this_matched_iommu_group \
          "${iommu_group_id}" \
          "${has_match}"
    done

    return 0
  }

  function format_this_output
  {
    if ! is_verbose; then
      return 0
    fi

    if ! is_string "${driver}"; then
      driver="${NULL_VALUE}"
    fi

    local -r tab_prefix="\t\t"
    local -r prefix="${tab_prefix}              "

    local -r hardware_id_output="$( \
      wrap_text \
        true \
        false \
        true \
        "${prefix}" \
        "${COLUMN_SIZE}" \
        "${tab_prefix}Hardware ID:  ${hardware_id}"
    )"

    local -r name_input="${tab_prefix}Name:         ${name}"

    # FIXME: some names do not appear. Why?
    local +r name_output="$( \
      wrap_text \
        true \
        false \
        true \
        "${prefix}" \
        "${COLUMN_SIZE}" \
        "${name_input}"
    )"

    if ! is_string "${name_output}"; then
      name_output="${name_input}"
    fi

    local -r name_output

    local -r type_output="$( \
      wrap_text \
        true \
        false \
        true \
        "${prefix}" \
        "${COLUMN_SIZE}" \
        "${tab_prefix}Type:         ${type}"
    )"

    local -r make_output="$( \
      wrap_text \
        true \
        false \
        true \
        "${prefix}" \
        "${COLUMN_SIZE}" \
        "${tab_prefix}Vendor:       ${make}"
    )"

    iommu_group_output_list+=(
      "\t${device_index}:"
      "${tab_prefix}Slot ID:      ${bus_id}"
      "${make_output}"
      "${name_output}"
      "${type_output}"
      "${tab_prefix}Driver:       ${driver}"
      "${hardware_id_output}"
      ""
    )

    if [[ "${driver}" == "${NULL_VALUE}" ]]; then
      local +r driver
      local -r driver=""
    fi

    (( device_index++ ))
    return 0
  }

  #
  # $1 : the Hardware ID as a string.
  #
  function get_driver_list
  {
    if ! is_string "${1}"; then
      return 1
    fi

    local -ar get_driver_list="${HARDWARE_ID_AND_DRIVER["${1}"]//,\\n}"

    for key in "${!get_driver_list[@]}"; do
      driver="${get_driver_list["${key}"]}"

      if [[ "${driver}" != "${NULL_VALUE}" ]]; then
        continue
      fi

      echo "${driver}"
    done

    return 0
  }

  function is_match_video_input_valid
  {
    if ! "${match_video}"; then
      return 0
    fi

    local -a input_list=$( \
      echo \
        "${input_delim}" \
      | tr \
        , \
        "\n" \
    )

    for this_input in ${input_list[@]}; do
      if [[ "${this_input}" -lt "${MIN_VIDEO_IOMMU_GROUP_INDEX}" ]] \
        || [[  "${this_input}" -gt "${MAX_VIDEO_IOMMU_GROUP_INDEX}" ]]; then
        print_and_log_output \
          "Please enter a value between ${MIN_VIDEO_IOMMU_GROUP_INDEX}" \
          "and ${MAX_VIDEO_IOMMU_GROUP_INDEX}."

        print_invalid_option \
          "${input_delim}"
      fi
    done

    return 0
  }

  #
  # $1 : the Hardware ID as a string.
  #
  function modify_xml_drivers
  {
    if ! is_string "${1}"; then
      return 1
    fi

    local -r hardware_id="${1}"

    local -ar modify_xml_drivers_list="$( \
      get_driver_list \
        "${hardware_id}" \
    )"

    if "${INPUT_DICT["XML_WRITE"]}" \
      && ! "${INPUT_DICT["XML_READ"]}" \
      && ! set_xml_driver_list "${hardware_id}" "${modify_xml_drivers_list}"; then
      return 1
    fi

    return 0
  }

  function modify_xml_hardware_ids
  {
    if ( \
        ! is_empty_file "${XML_FILE}" \
        || ! validate_xml \
      ) \
      && ! write_xml_template_to_file; then
      return 1
    fi

    if ! write_hardware_ids_to_xml; then
      return 1
    fi

    local -a hardware_id_list=()

    local -ir total_devices="$( \
      lspcie -n \
        | wc --lines \
    )"

    local -i index=1

    while [[ "${index}" -le "${total_devices}" ]]; do
      hardware_id="$( \
        lspcie -n \
          | sed -n "${index} p" \
          | cut --delimiter ' ' --fields 3
      )"

      hardware_id_list+=( "${hardware_id}" )
      (( index++ ))
    done


    if ! write_hardware_ids_to_xml; then
      return 1
    fi

    return 0
  }

  function parse_many_inputs
  {
    local -a previous_match_list=()
    local -ir minimum_key=0

    for key in ${!IOMMU_GROUP_ID_LIST[@]}; do
      previous_match_list+=( false )
    done

    for key in ${!INPUT_LIST[@]}; do
      local has_video=false

      local input=${INPUT_LIST["${key}"]}
      local input_delim=${INPUT_DICT["${input}"]}

      local match_iommu_group=false
      local match_name=false
      local match_type=false
      local match_vendor=false
      local match_video=false

      local previous_input=""
      local -i last_key=$(( ${key} - 1 ))

      local -i vga_iommu_group_index=1

      initialize_iommu_group_match_flag
      is_match_video_input_valid
      parse_many_unmatched_iommu_groups
    done

    return 0
  }

  function parse_many_unmatched_iommu_groups
  {
    for iommu_group_id in ${IOMMU_GROUP_ID_LIST[@]}; do
      local has_match=false
      has_video=false
      local previous_has_match=true

      parse_this_unmatched_iommu_group

      if "${has_video}"; then
        (( vga_iommu_group_index++ ))
      fi

      set_previous_match_flags
      set_match_flag_by_previous_match

      matched_iommu_group_id_list["${iommu_group_id}"]="${has_match}"
      previous_input=${INPUT_LIST["${last_key}"]}
      previous_match_list["${last_key}"]="${has_match}"
    done

    return 0
  }

  function parse_this_unmatched_iommu_group
  {
    local bus_id_delim="${IOMMU_GROUP_ID_AND_BUS_ID["${iommu_group_id}"]}"

    local -a bus_id_list="$( \
      echo -e "${bus_id_delim//,/\\n}" \
    )"

    for bus_id in ${bus_id_list[@]}; do
      bus_id="${bus_id:5}"
      local name=""
      local type=""
      local vendor=""

      set_device_properties_for_parse
      set_has_video_flag

      local -a input_list=$( \
        echo \
          "${input_delim}" \
        | tr \
          , \
          "\n" \
      )

      set_match_flag_by_iommu_group

      for this_input in ${input_list[@]}; do
        set_match_flag_by_device
      done
    done

    set_unmatch_flag
    return 0
  }

  function parse_this_matched_iommu_group
  {
    if ! is_positive_integer "${1}" \
      || ! is_boolean "${2}"; then
      return 1
    fi

    local bus_id_delim="${IOMMU_GROUP_ID_AND_BUS_ID["${1}"]}"

    local -a bus_id_list="$( \
      echo -e "${bus_id_delim//,/\\n}" \
    )"

    for bus_id in ${bus_id_list[@]}; do
      bus_id="${bus_id:5}"
      local driver=""
      local hardware_id=""
      local name=""
      local type=""
      local vendor=""

      set_device_properties_for_match
      set_device_properties_for_parse

      if "${2}"; then
        OUTPUT_DICT["SELECTED_DRIVER_LIST"]+="${driver}"
        OUTPUT_DICT["SELECTED_HARDWARE_ID_LIST"]+="${hardware_id}"
        OUTPUT_DICT["SELECTED_GROUP_ID_LIST"]+="${iommu_group_id},"

      else
        OUTPUT_DICT["UNSELECTED_GROUP_ID_LIST"]+="${iommu_group_id},"
      fi

      format_this_output
    done

    return 0
  }

  function print_many_output_lists
  {
    if ! is_verbose; then
      if ! is_string "${OUTPUT_DICT["SELECTED_HARDWARE_ID_LIST"]}"; then
        return 0
      fi

      print_and_log_output "${OUTPUT_DICT["SELECTED_HARDWARE_ID_LIST"]}"
      print_and_log_output "${OUTPUT_DICT["SELECTED_DRIVER_LIST"]}"
      return 0
    fi

    if is_verbose_doubled; then
      for line in "${iommu_group_output_list[@]}"; do
        print_and_log_output "${line}"
      done
    fi

    set_null_value_to_empty_output_lists

    print_and_log_output "Found Groups:\n${OUTPUT_DICT["FOUND_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Found Groups with only Host device(s):\n${OUTPUT_DICT["FOUND_HOST_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Found Groups with only PCIe device(s):\n${OUTPUT_DICT["FOUND_PCIE_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Found Groups with Host/PCIe device(s):\n${OUTPUT_DICT["FOUND_HOST_AND_PCIE_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Found Groups with VGA device(s):\n${OUTPUT_DICT["FOUND_VGA_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Found Groups with VFIO device(s):\n${OUTPUT_DICT["FOUND_VFIO_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Unselected Groups:\n${OUTPUT_DICT["UNSELECTED_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Selected Groups:\n${OUTPUT_DICT["SELECTED_GROUP_ID_LIST"]}\n"

    #
    # NOTE: Print hardware IDs first, as this value is never null, but drivers
    #       may be. Should a user rely on the output as input, the user may only
    #       have to validate if $2 is null or not. Otherwise, the user would have
    #       to validate by regex, which is not nice.
    #

    print_and_log_output \
      "Selected Hardware IDs:\n${OUTPUT_DICT["SELECTED_HARDWARE_ID_LIST"]}\n"

    print_and_log_output "Selected Drivers:\n${OUTPUT_DICT["SELECTED_DRIVER_LIST"]}"
    return 0
  }

  function set_null_value_to_empty_output_lists
  {
    if ! is_string "${OUTPUT_DICT["FOUND_GROUP_ID_LIST"]}"; then
      OUTPUT_DICT["FOUND_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUT_DICT["FOUND_HOST_GROUP_ID_LIST"]}"; then
      OUTPUT_DICT["FOUND_HOST_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUT_DICT["FOUND_HOST_AND_PCIE_GROUP_ID_LIST"]}"; then
      OUTPUT_DICT["FOUND_HOST_AND_PCIE_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUT_DICT["FOUND_PCIE_GROUP_ID_LIST"]}"; then
      OUTPUT_DICT["FOUND_PCIE_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUT_DICT["FOUND_VFIO_GROUP_ID_LIST"]}"; then
      OUTPUT_DICT["FOUND_VFIO_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUT_DICT["FOUND_VGA_GROUP_ID_LIST"]}"; then
      OUTPUT_DICT["FOUND_VGA_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUT_DICT["SELECTED_DRIVER_LIST"]}"; then
      OUTPUT_DICT["SELECTED_DRIVER_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUT_DICT["SELECTED_GROUP_ID_LIST"]}"; then
      OUTPUT_DICT["SELECTED_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUT_DICT["SELECTED_HARDWARE_ID_LIST"]}"; then
      OUTPUT_DICT["SELECTED_HARDWARE_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUT_DICT["UNSELECTED_GROUP_ID_LIST"]}"; then
      OUTPUT_DICT["UNSELECTED_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    return 0
  }

  function set_device_properties_for_match
  {
    hardware_id="${BUS_ID_AND_HARDWARE_ID[${bus_id}]}"
    driver=${HARDWARE_ID_AND_DRIVER["${hardware_id}"]}
    return 0
  }

  function set_device_properties_for_parse
  {
    name=${HARDWARE_ID_AND_NAME["${hardware_id}"]}
    type=${HARDWARE_ID_AND_TYPE["${hardware_id}"]}
    vendor=${HARDWARE_ID_AND_MAKE["${hardware_id}"]}
    return 0
  }

  function set_has_video_flag
  {
    if ! [[ "${type^^}" =~ "GRAPHIC" ]] \
      && ! [[ "${type^^}" =~ "VGA" ]] \
      && ! [[ "${type^^}" =~ "VIDEO" ]]; then
      return 0
    fi

    has_video=true
    return 0
  }

  function set_match_flag_by_previous_match
  {
    if [[ "${previous_input}" =~ "UNMATCH" ]] \
      && [[ "${input_delim}" =~ "UNMATCH" ]]; then
      if ! "${previous_has_match}"; then
        has_match="${previous_has_match}"
      fi

    elif [[ "${previous_input}" =~ "MATCH" ]] \
      && ! [[ "${previous_input}" =~ "UNMATCH" ]] \
      && [[ "${input_delim}" =~ "MATCH" ]] \
      && ! [[ "${input_delim}" =~ "UNMATCH" ]]; then
      has_match="${previous_has_match}"

    else
      if ! "${previous_has_match}"; then
        has_match="${previous_has_match}"
      fi
    fi

    return 0
  }

  function set_match_flag_by_device
  {
    if "${match_name}" \
      && [[ "${name^^}" =~ "${this_input^^}" ]]; then
      has_match=true
    fi

    if "${match_type}" \
      && [[ "${type^^}" =~ "${this_input^^}" ]]; then
      has_match=true
    fi

    if "${match_vendor}" \
      && [[ "${vendor^^}" =~ "${this_input^^}" ]]; then
      has_match=true
    fi

    set_video_match_flag
    return 0
  }

  function set_match_flag_by_iommu_group
  {
    if ! "${match_iommu_group}" \
      || ! [[ ",${input_delim}," =~ ",${iommu_group_id}," ]]; then
      return 0
    fi

    has_match=true
    return 0
  }

  function set_previous_match_flags
  {
    if [[ "${last_key}" -lt "${minimum_key}" ]]; then
      previous_input=""
      previous_match_list["${iommu_group_id}"]="${has_match}"

    else
      previous_input=${INPUT_LIST["${last_key}"]}
      previous_has_match=${previous_match_list["${iommu_group_id}"]}
    fi

    return 0
  }

  function set_unmatch_flag
  {
    if [[ "${input}" =~ "UNMATCH" ]]; then
      if "${has_match}"; then
        has_match=false
      else
        has_match=true
      fi
    fi

    return 0
  }

  function set_video_iommu_group_index_maximum
  {
    local has_video=false

    local input="MATCH_VIDEO_LIST"
    local input_delim=1

    local match_iommu_group=false
    local match_name=false
    local match_type=false
    local match_vendor=false
    local match_video=true

    local previous_input=""

    local -i last_key=$(( ${key} - 1 ))
    local -i vga_iommu_group_index=1

    parse_many_inputs

    MAX_VIDEO_IOMMU_GROUP_INDEX=$(( ${vga_iommu_group_index} - 1 ))
    return 0
  }

  function set_video_match_flag
  {
    if ! "${match_video}" \
      || ! "${has_video}" \
      || ! [[ "${vga_iommu_group_index^^}" =~ "${this_input^^}" ]]; then
      return 0
    fi

    has_match=true
    return 0
  }

  function sort_many_output_lists
  {
    OUTPUT_DICT["FOUND_GROUP_ID_LIST"]="$( \
      sort_comma_delimited_list \
        "${OUTPUT_DICT["FOUND_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["FOUND_HOST_GROUP_ID_LIST"]="$( \
      sort_comma_delimited_list \
        "${OUTPUT_DICT["FOUND_HOST_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["FOUND_HOST_AND_PCIE_GROUP_ID_LIST"]="$( \
      sort_comma_delimited_list \
        "${OUTPUT_DICT["FOUND_HOST_AND_PCIE_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["FOUND_PCIE_GROUP_ID_LIST"]="$( \
      sort_comma_delimited_list \
        "${OUTPUT_DICT["FOUND_PCIE_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["FOUND_VFIO_GROUP_ID_LIST"]="$( \
      sort_comma_delimited_list \
        "${OUTPUT_DICT["FOUND_VFIO_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["FOUND_VGA_GROUP_ID_LIST"]="$( \
      sort_comma_delimited_list \
        "${OUTPUT_DICT["FOUND_VGA_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["SELECTED_DRIVER_LIST"]="$( \
      sort_comma_delimited_list \
        "${OUTPUT_DICT["SELECTED_DRIVER_LIST"]}" \
    )"

    OUTPUT_DICT["SELECTED_HARDWARE_ID_LIST"]="$( \
      sort_comma_delimited_list \
        "${OUTPUT_DICT["SELECTED_HARDWARE_ID_LIST"]}" \
    )"

    OUTPUT_DICT["SELECTED_GROUP_ID_LIST"]="$( \
      sort_comma_delimited_list \
        "${OUTPUT_DICT["SELECTED_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["UNSELECTED_GROUP_ID_LIST"]="$( \
      sort_comma_delimited_list \
        "${OUTPUT_DICT["UNSELECTED_GROUP_ID_LIST"]}" \
    )"

    return 0
  }

  function trim_many_output_lists
  {
    OUTPUT_DICT["FOUND_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUT_DICT["FOUND_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["FOUND_HOST_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUT_DICT["FOUND_HOST_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["FOUND_HOST_AND_PCIE_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUT_DICT["FOUND_HOST_AND_PCIE_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["FOUND_PCIE_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUT_DICT["FOUND_PCIE_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["FOUND_VFIO_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUT_DICT["FOUND_VFIO_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["FOUND_VGA_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUT_DICT["FOUND_VGA_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["SELECTED_DRIVER_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUT_DICT["SELECTED_DRIVER_LIST"]}" \
    )"

    OUTPUT_DICT["SELECTED_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUT_DICT["SELECTED_GROUP_ID_LIST"]}" \
    )"

    OUTPUT_DICT["SELECTED_HARDWARE_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUT_DICT["SELECTED_HARDWARE_ID_LIST"]}" \
    )"

    OUTPUT_DICT["UNSELECTED_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUT_DICT["UNSELECTED_GROUP_ID_LIST"]}" \
    )"

    return 0
  }

  # FIXME
  function write_hardware_ids_to_xml
  {
    if "${INPUT_DICT["XML_WRITE"]}" \
      && ! "${INPUT_DICT["XML_READ"]}" \
      && ! set_xml_hardware_id_list \
        true \
        ${hardware_id_list[@]}; then
      return 1
    fi

    return 0
  }