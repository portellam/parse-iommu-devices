#!/bin/false

#
# Filename:       parse_src
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# TODO:
# - [ ] add validation for all inputs.
# - [x] fix output to show every IOMMU group and it's device info.
# - [x] fix lists?
# - [ ] check if all commands used are installed.
# - [x] ignore groups with vfio.
# - [ ] xml file
#   - hardware ID as primary key.
#   - record one or more driver(s).
#   - if `lspci` differs and is not binded to vfio, update or append.
#   - append new information.
#   - add functionality to sort by driver name?
#  - [ ] populate hardware_id and driver dictionary with xml output.
#  - [ ] replace args and output dict with standalone params.
#  - [ ] add to xml
#  - [ ] delete from xml
#  - [ ] update xml
#  - [ ] create xml
#  - [ ] get next valid value if current is not available (driver is not installed).
#  - [ ] make a command line operator.
#  - [ ] append usage
#  - use this script inside deploy-VFIO.
# - [ ] create logger.
#
# !!! - [ ] save entire lspci output?

#
# TESTS:
# - [ ] all operators
#   - fix comma delimited lists for each match operator (works for first value).
#  - [ ] group match
#  - [ ] group reverse match
#  - [ ] less output
#  - [ ] min. output
#  - [ ] name match
#  - [x] name reverse match
#  - [x] type match
#  - [x] type reverse match
#  - [x] vendor match
#  - [x] vendor reverse match
#  - [ ] vga group index match
# - [ ] test with vfio setup.
#

#
# params (1/2)
#
  if [[ -z "${1}" ]]; then
    exit 1
  fi

  declare -g SOURCE_PATH="${1}"

#
# sources (1/2)
#
  source \
    "${SOURCE_PATH}datatype_src"

#
# params (2/2)
#
  if ! is_string "${2}"; then
    exit 1
  fi

  if ! is_string "${3}"; then
    exit 1
  fi

  declare -g SCRIPT_NAME="${2}"
  declare -gi COLUMN_SIZE="$( tput cols )"
  declare -g LOG_EXTENSION=".log"

  declare -gA OUTPUTS=(
    ["FOUND_GROUP_ID_LIST"]=""
    ["FOUND_HOST_GROUP_ID_LIST"]=""
    ["FOUND_HOST_AND_PCI_GROUP_ID_LIST"]=""
    ["FOUND_PCI_GROUP_ID_LIST"]=""
    ["FOUND_VGA_GROUP_ID_LIST"]=""
    ["SELECTED_DRIVER_LIST"]=""
    ["SELECTED_GROUP_ID_LIST"]=""
    ["SELECTED_HARDWARE_ID_LIST"]=""
    ["UNSELECTED_GROUP_ID_LIST"]=""
    ["FOUND_VFIO_GROUP_ID_LIST"]=""
  )

#
# sources (2/2)
#
  source \
    "${SOURCE_PATH}file_src"

  source \
    "${SOURCE_PATH}print_src" \
    "${SOURCE_PATH}" \
    "${SCRIPT_NAME}${LOG_EXTENSION}" \
    "${COLUMN_SIZE}"
#
# logic
#
  function append_device_info_to_output
  {
    if ! is_verbose; then
      return 0
    fi

    if ! is_string "${driver}"; then
      driver="${NULL_VALUE}"
    fi

    local -r tab_prefix="\t\t"
    local -r prefix="${tab_prefix}              "

    local -r hardware_id_output="$( \
      wrap_text \
        true \
        false \
        true \
        "${prefix}" \
        "${COLUMN_SIZE}" \
        "${tab_prefix}Hardware ID:  ${hardware_id}"
    )"

    local -r name_input="${tab_prefix}Name:         ${name}"

    # FIXME: some names do not appear. Why?
    local +r name_output="$( \
      wrap_text \
        true \
        false \
        true \
        "${prefix}" \
        "${COLUMN_SIZE}" \
        "${name_input}"
    )"

    if ! is_string "${name_output}"; then
      name_output="${name_input}"
    fi

    local -r name_output

    local -r type_output="$( \
      wrap_text \
        true \
        false \
        true \
        "${prefix}" \
        "${COLUMN_SIZE}" \
        "${tab_prefix}Type:         ${type}"
    )"

    local -r vendor_output="$( \
      wrap_text \
        true \
        false \
        true \
        "${prefix}" \
        "${COLUMN_SIZE}" \
        "${tab_prefix}Vendor:       ${vendor}"
    )"

    group_output+=(
      "\t${device_index}:"
      "${tab_prefix}Slot ID:      ${bus_id}"
      "${vendor_output}"
      "${name_output}"
      "${type_output}"
      "${tab_prefix}Driver:       ${driver}"
      "${hardware_id_output}"
      ""
    )

    if [[ "${driver}" == "${NULL_VALUE}" ]]; then
      local +r driver
      local -r driver=""
    fi

    (( device_index++ ))
    return 0
  }

  function create_logfile
  {
    if [[ -e "${LOG_FILE}" ]] \
      && ! rm --force "${LOG_FILE}" &> /dev/null; then
      echo -e "Failed to delete logfile."
    fi

    if ! touch "${LOG_FILE}" &> /dev/null; then
      echo -e "Failed to create logfile."
    fi
  }

  function get_driver_list
  {
    if ! is_string "${1}"; then
      return 1
    fi

    local -ar get_driver_list="${HARDWARE_ID_AND_DRIVER["${1}"]//,\\n}"

    for key in "${!get_driver_list[@]}"; do
      driver="${get_driver_list["${key}"]}"

      if [[ "${driver}" != "${NULL_VALUE}" ]]; then
        continue
      fi

      echo "${driver}"
    done
  }

  function is_matched_keyword
  {
    if ! is_variable "${1}"; then
      return 2
    fi

    local -n reference_is_matched="${1}"

    if ! is_boolean "${reference_is_matched}"; then
      return 2
    fi

    local do_match=false
    local things_to_match=""
    local has_dict=false

    if ! is_string "${2}"; then
      return 2
    fi

    if is_dict "${2}"; then
      has_dict=true
      local -n is_matched_dict="${2}"
      shift
    fi

    if "${has_dict}"; then
      do_match="${is_matched_dict["${2}"]}"
      things_to_match="${is_matched_dict["${3}"]}"

      if ! is_boolean "${do_match}" \
        || ! is_string "${things_to_match}"; then
        return 2
      fi

    else
      if ! is_boolean "${2}"; then
        return 2
      fi

      do_match="${2}"

      if ! is_string "${3}"; then
        return 2
      fi

      things_to_match="${3}"
      shift
    fi

    if "${reference_is_matched}" \
      || ! "${do_match}"; then
      return 0
    fi

    shift
    shift
    local things="$@"

    for this_thing in $( \
      echo "${things_to_match}" \
        | sed "s/,/ /g"
    ); do
      if [[ "${things,,}" =~ "${this_thing,,}" ]]; then
        reference_is_matched=true
        return 0
      fi
    done

    reference_is_matched=false
    return 1
  }

  function is_matched_word
  {
    if ! is_variable "${1}"; then
      return 2
    fi

    local -n reference_is_matched="${1}"

    if ! is_boolean "${reference_is_matched}"; then
      return 2
    fi

    local do_match=false
    local things_to_match=""
    local has_dict=false

    if ! is_string "${2}"; then
      return 2
    fi

    if is_dict "${2}"; then
      has_dict=true
      local -n is_matched_dict="${2}"
      shift
    fi

    if "${has_dict}"; then
      do_match="${is_matched_dict["${2}"]}"
      things_to_match="${is_matched_dict["${3}"]}"

      if ! is_boolean "${do_match}" \
        || ! is_string "${things_to_match}"; then
        return 2
      fi

    else
      if ! is_boolean "${2}"; then
        return 2
      fi

      do_match="${2}"

      if ! is_string "${3}"; then
        return 2
      fi

      things_to_match="${3}"
      shift
    fi

    if "${reference_is_matched}" \
      || ! "${do_match}"; then
      return 0
    fi

    shift
    shift
    shift
    local things="$@"

    for this_thing in $( \
      echo "${things_to_match}" \
        | sed "s/,/ /g"
    ); do
      if [[ "${things,,}" == "${this_thing,,}" ]]; then
        reference_is_matched=true
        return 0
      fi
    done

    reference_is_matched=false
    return 1
  }

  function modify_xml_drivers
  {
    if ! is_string "${1}"; then
      return 1
    fi

    local -r hardware_id="${1}"
    local -ar modify_xml_drivers_list="$( get_driver_list "${hardware_id}" )"

    if "${INPUTS["WRITE_XML"]}" \
      && ! "${INPUTS["READ_XML"]}" \
      && ! set_xml_driver_list "${hardware_id}" "${modify_xml_drivers_list}"; then
      return 1
    fi

    return 0
  }

  function modify_xml_hardware_ids
  {
    if ( \
        ! is_empty_file "${XML_FILE}" \
        || ! validate_xml \
      ) \
      && ! write_xml_template_to_file; then
      return 1
    fi

    if ! write_hardware_ids_to_xml; then
      return 1
    fi

    local -a hardware_id_list=()

    local -ir total_devices="$( \
      lspci -n \
        | wc --lines \
    )"

    local -i index=1

    while [[ "${index}" -le "${total_devices}" ]]; do
      hardware_id="$( \
        lspci -n \
          | sed -n "${index} p" \
          | cut --delimiter ' ' --fields 3
      )"

      hardware_id_list+=( "${hardware_id}" )
      (( index++ ))
    done


    if ! write_hardware_ids_to_xml; then
      return 1
    fi

    return 0
  }

  function parse_src_main
  {
    local -a group_output=()
    local -r message="Parsing hardware devices..."

    print_and_log_output \
      "${message}" \
      "${INPUTS["VERBOSE"]}"

    if ! verify_all_devices_matches; then
      print_and_log_output \
        "${message} Failed." \
        "${INPUTS["VERBOSE"]}"

      return 1
    fi

    print_and_log_output \
      "${message} Successful.\n" \
      "${INPUTS["VERBOSE"]}"

    sort_lists
    print_groups_output
    return 0
  }

  function print_groups_output
  {
    if ! is_verbose; then
      if ! is_string "${OUTPUTS["SELECTED_HARDWARE_ID_LIST"]}"; then
        return 0
      fi

      print_and_log_output "${OUTPUTS["SELECTED_HARDWARE_ID_LIST"]}"
      print_and_log_output "${OUTPUTS["SELECTED_DRIVER_LIST"]}"
      return 0
    fi

    if is_verbose_doubled; then
      for line in "${group_output[@]}"; do
        print_and_log_output "${line}"
      done
    fi

    set_null_value_to_lists_if_empty

    # print_and_log_output "Found Groups:\n${OUTPUTS["FOUND_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Found Groups with only Host device(s):\n${OUTPUTS["FOUND_HOST_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Found Groups with only PCIe device(s):\n${OUTPUTS["FOUND_PCI_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Found Groups with Host/PCIe device(s):\n${OUTPUTS["FOUND_HOST_AND_PCI_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Found Groups with VGA device(s):\n${OUTPUTS["FOUND_VGA_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Unselected Groups:\n${OUTPUTS["UNSELECTED_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Unselected Groups binded to VFIO:\n${OUTPUTS["FOUND_VFIO_GROUP_ID_LIST"]}\n"

    print_and_log_output \
      "Selected Groups:\n${OUTPUTS["SELECTED_GROUP_ID_LIST"]}\n"

    #
    # NOTE: Print hardware IDs first, as this value is never null, but drivers
    #       may be. Should a user rely on the output as input, the user may only
    #       have to validate if $2 is null or not. Otherwise, the user would have
    #       to validate by regex, which is not nice.
    #

    print_and_log_output \
      "Selected Hardware IDs:\n${OUTPUTS["SELECTED_HARDWARE_ID_LIST"]}\n"

    print_and_log_output "Selected Drivers:\n${OUTPUTS["SELECTED_DRIVER_LIST"]}"
    return 0
  }

  function set_host_or_pci_flag
  {
    if ! is_string "${1}"; then
      return 1
    fi

    local -r this_bus_id="${1::2}"
    local -r internal_bus_id="00"

    if [[ "${this_bus_id}" == "${internal_bus_id}" ]]; then
      this_has_host=true
      this_has_pci=false

    else
      this_has_host=false
      this_has_pci=true
    fi
  }

    function set_null_value_to_lists_if_empty
  {
    if ! is_string "${OUTPUTS["FOUND_GROUP_ID_LIST"]}"; then
      OUTPUTS["FOUND_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUTS["FOUND_HOST_GROUP_ID_LIST"]}"; then
      OUTPUTS["FOUND_HOST_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUTS["FOUND_HOST_AND_PCI_GROUP_ID_LIST"]}"; then
      OUTPUTS["FOUND_HOST_AND_PCI_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUTS["FOUND_PCI_GROUP_ID_LIST"]}"; then
      OUTPUTS["FOUND_PCI_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUTS["FOUND_VFIO_GROUP_ID_LIST"]}"; then
      OUTPUTS["FOUND_VFIO_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUTS["FOUND_VGA_GROUP_ID_LIST"]}"; then
      OUTPUTS["FOUND_VGA_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUTS["SELECTED_GROUP_ID_LIST"]}"; then
      OUTPUTS["SELECTED_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUTS["SELECTED_DRIVER_LIST"]}"; then
      OUTPUTS["SELECTED_DRIVER_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUTS["SELECTED_HARDWARE_ID_LIST"]}"; then
      OUTPUTS["SELECTED_HARDWARE_ID_LIST"]="${NULL_VALUE}"
    fi

    if ! is_string "${OUTPUTS["UNSELECTED_GROUP_ID_LIST"]}"; then
      OUTPUTS["UNSELECTED_GROUP_ID_LIST"]="${NULL_VALUE}"
    fi

    return 0
  }

  function sort_lists
  {
    OUTPUTS["SELECTED_DRIVER_LIST"]="$( \
      sort_comma_delimited_list "${OUTPUTS["SELECTED_DRIVER_LIST"]}" \
    )"

    OUTPUTS["SELECTED_HARDWARE_ID_LIST"]="$( \
      sort_comma_delimited_list "${OUTPUTS["SELECTED_HARDWARE_ID_LIST"]}" \
    )"

    return 0
  }

  function verify_all_devices_matches
  {
    local -ir min_vga_group_index=1
    local -i vga_group_index="${min_vga_group_index}"

    for iommu_group_id in $( seq 0 "${MAX_IOMMU_GROUP_ID}" ); do
      verify_many_devices_matches "${iommu_group_id}"
    done

    OUTPUTS["FOUND_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUTS["FOUND_GROUP_ID_LIST"]}" \
    )"

    OUTPUTS["FOUND_HOST_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUTS["FOUND_HOST_GROUP_ID_LIST"]}" \
    )"

    OUTPUTS["FOUND_HOST_AND_PCI_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUTS["FOUND_HOST_AND_PCI_GROUP_ID_LIST"]}" \
    )"

    OUTPUTS["FOUND_PCI_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUTS["FOUND_PCI_GROUP_ID_LIST"]}" \
    )"

    OUTPUTS["FOUND_VFIO_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUTS["FOUND_VFIO_GROUP_ID_LIST"]}" \
    )"

    OUTPUTS["FOUND_VGA_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUTS["FOUND_VGA_GROUP_ID_LIST"]}" \
    )"

    OUTPUTS["SELECTED_DRIVER_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUTS["SELECTED_DRIVER_LIST"]}" \
    )"

    OUTPUTS["SELECTED_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUTS["SELECTED_GROUP_ID_LIST"]}" \
    )"

    OUTPUTS["SELECTED_HARDWARE_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUTS["SELECTED_HARDWARE_ID_LIST"]}" \
    )"

    OUTPUTS["UNSELECTED_GROUP_ID_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${OUTPUTS["UNSELECTED_GROUP_ID_LIST"]}" \
    )"

    return 0
  }

  function verify_many_devices_matches
  {
    if ! is_positive_integer "${1}"; then
      return 1
    fi

    local -i device_index=1
    local bus_id_list="${IOMMU_GROUP_ID_AND_BUS_ID["${1}"]}"
    local driver_list=""
    local hardware_id_list=""

    local do_select=false
    local do_select_host=false
    local do_select_pci=false
    local do_select_name=false
    local do_select_type=false
    local do_select_vendor=false
    local do_select_vga_group_index=false

    local some_have_groups=false
    local some_have_host=false
    local some_have_pci=false
    local some_have_name=false
    local some_have_type=false
    local some_have_vendor=false
    local some_have_vfio=false
    local some_have_vga=false
    local some_have_vga_group_index=false

    local some_have_no_groups=false


    bus_id_list="$( \
      echo \
        -e \
        "${bus_id_list//,\\n}" \
      | sort \
        --version-sort
      )"

    group_output+=( "IOMMU Group ${iommu_group_id}:" )

    for bus_id_delim in "${bus_id_list[@]}"; do
      for bus_id in $( echo -e "${bus_id_delim//,/\\n}" ); do
        verify_this_devices_matches "${bus_id}"
      done
    done

    if "${do_select_host}" \
      || "${do_select_name}" \
      || "${do_select_pci}" \
      || "${do_select_type}" \
      || "${do_select_vendor}" \
      || "${do_select_vga_group_index}"; then
      do_select=true
    fi

    OUTPUTS["FOUND_GROUP_ID_LIST"]+="${1},"

    if "${some_have_host}" \
      && ! "${some_have_pci}"; then
      OUTPUTS["FOUND_HOST_GROUP_ID_LIST"]+="${1},"
    fi

    if ! "${some_have_host}" \
      && "${some_have_pci}"; then
      OUTPUTS["FOUND_PCI_GROUP_ID_LIST"]+="${1},"
    fi

    if "${some_have_host}" \
      && "${some_have_pci}"; then
      OUTPUTS["FOUND_HOST_AND_PCI_GROUP_ID_LIST"]+="${1},"
    fi

    if "${some_have_vga}"; then
      (( vga_group_index++ ))
      OUTPUTS["FOUND_VGA_GROUP_ID_LIST"]+="${1},"
    fi

    is_matched_word \
      "some_have_groups" \
      "INPUTS" \
      "MATCH_GROUPS" \
      "GROUPS_MATCH_LIST" \
      "${1}"

    is_matched_word \
      "some_have_no_groups" \
      "INPUTS" \
      "UNMATCH_GROUPS" \
      "GROUPS_UNMATCH_LIST" \
      "${1}"

    if "${some_have_vfio}"; then
      do_select=false
      OUTPUTS["FOUND_VFIO_GROUP_ID_LIST"]+="${1},"

    elif "${some_have_groups}" \
      || ! "${some_have_no_groups}" \
      || "${some_have_name}" \
      || "${some_have_type}" \
      || "${some_have_vendor}" \
      || "${some_have_vga_group_index}"; then
      do_select=true

    else
      do_select=false
    fi

    if "${do_select}"; then
      OUTPUTS["SELECTED_GROUP_ID_LIST"]+="${1},"
      OUTPUTS["SELECTED_DRIVER_LIST"]+="${driver_list}"
      OUTPUTS["SELECTED_HARDWARE_ID_LIST"]+="${hardware_id_list}"

    else
      OUTPUTS["UNSELECTED_GROUP_ID_LIST"]+="${1},"
    fi

    return 0
  }

  function verify_this_devices_matches
  {
    if ! is_string "${1}"; then
      return 1
    fi

    local -r bus_id="${1}"
    local -r hardware_id="${BUS_ID_AND_HARDWARE_ID[${bus_id}]}"
    local -r driver="${HARDWARE_ID_AND_DRIVER[${hardware_id}]}"
    local -r name="${HARDWARE_ID_AND_NAME[${hardware_id}]}"
    local -r type="${HARDWARE_ID_AND_TYPE[${hardware_id}]}"
    local -r vendor="${HARDWARE_ID_AND_VENDOR[${hardware_id}]}"

    local this_has_host=false
    local this_has_pci=false
    local this_has_name=false
    local this_has_type=false
    local this_has_vendor=false
    local this_has_vfio=false
    local this_has_vga=false
    local this_has_vga_group_index=false

    local this_has_no_name=false
    local this_has_no_type=false
    local this_has_no_vendor=false

    append_device_info_to_output
    set_host_or_pci_flag "${bus_id}"

    driver_list+="${driver},"
    hardware_id_list="${hardware_id},"

    is_matched_keyword \
      "this_has_name" \
      "INPUTS" \
      "MATCH_NAME" \
      "MATCH_NAME_LIST" \
      "${name}"

    is_matched_keyword \
      "this_has_no_name" \
      "INPUTS" \
      "UNMATCH_NAME" \
      "NAMES_UNMATCH_LIST" \
      "${name}"

    is_matched_keyword \
      "this_has_type" \
      "INPUTS" \
      "MATCH_TYPE" \
      "TYPES_MATCH_LIST" \
      "${type}"

    is_matched_keyword \
      "this_has_no_type" \
      "INPUTS" \
      "UNMATCH_TYPE" \
      "TYPES_UNMATCH_LIST" \
      "${type}"

    is_matched_keyword \
      "this_has_vendor" \
      "INPUTS" \
      "MATCH_VENDOR" \
      "VENDORS_MATCH_LIST" \
      "${vendor}"

    is_matched_keyword \
      "this_has_no_vendor" \
      "INPUTS" \
      "UNMATCH_VENDOR" \
      "VENDORS_UNMATCH_LIST" \
      "${vendor}"

    local -r vfio_driver_list="pci-stub,vfio-pci"

    is_matched_word \
      "this_has_vfio" \
      true \
      "${vfio_driver_list[@]}" \
      "${driver}"

    local -r vga_type_list="graphics,vga,video"

    is_matched_word \
      "this_has_vga" \
      true \
      "${vga_type_list[@]}" \
      "${type}"

    is_matched_word \
      "this_has_vga_group_index" \
      "INPUTS" \
      "MATCH_VGA" \
      "VGA_GROUP_INDEX_MATCH_LIST" \
      "${vga_group_index}"

    if "${this_has_host}"; then
      some_have_host=true

      if "${INPUTS["MATCH_HOST"]}"; then
        do_select_host=true
      fi
    fi

    if "${this_has_pci}"; then
      some_have_pci=true

      if "${INPUTS["MATCH_PCI"]}"; then
        do_select_pci=true
      fi
    fi

    if "${this_has_name}" \
      && ! "${this_has_no_name}"; then
      some_have_name=true

      if "${INPUTS["MATCH_NAME"]}"; then
        do_select_name=true
      fi

    else
      if "${INPUTS["UNMATCH_NAME"]}"; then
        do_select_name=false
      fi
    fi

    if "${this_has_type}" \
      && ! "${this_has_no_type}"; then
      some_have_type=true

      if "${INPUTS["MATCH_TYPE"]}"; then
        do_select_type=true
      fi

    else
      if "${INPUTS["UNMATCH_TYPE"]}"; then
        do_select_type=false
      fi
    fi

    if "${this_has_vendor}" \
      && ! "${this_has_no_vendor}"; then
      some_have_vendor=true

      if "${INPUTS["MATCH_VENDOR"]}"; then
        do_select_vendor=true
      fi

    else
      if "${INPUTS["UNMATCH_VENDOR"]}"; then
        do_select_vendor=false
      fi
    fi

    if "${this_has_vfio}"; then
      some_have_vfio=true
    fi

    if "${this_has_vga}"; then
      some_have_vga=true
    fi

    if "${this_has_vga_group_index}"; then
      some_have_vga_group_index=true

      if "${INPUTS["MATCH_VGA"]}"; then
        do_select_vga_group_index=true
      fi
    fi

    return 0
  }

  function write_hardware_ids_to_xml
  {
    if "${INPUTS["WRITE_XML"]}" \
      && ! "${INPUTS["READ_XML"]}" \
      && ! set_xml_hardware_id_list \
        true \
        ${hardware_id_list[@]}; then
      return 1
    fi

    return 0
  }

#
# - [ ] test combinations of options!
# - [x] fixed vga-index
# - [x] fixed host and pci
# - [ ] vga-index and host and/or pci
# - [ ]
# - [ ]
#