#!/bin/false

#
# Filename:       input_src
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

#
# params (1/2)
#
  declare -g SOURCE_PATH="${1}"

#
# sources (1/2)
#
  source \
    "${SOURCE_PATH}datatype_src"

  source \
    "${SOURCE_PATH}file_src"

#
# params (2/2)
#
  shopt -s nullglob   # aid with argument inputs.

  if ! is_string "${2}"; then
    exit 1
  fi

  if ! is_string "${3}"; then
    exit 1
  fi

  declare -g SCRIPT_NAME="${2}"
  declare -g SCRIPT_VERSION="${3}"

  declare -gi COLUMN_SIZE="$( tput cols )"
  declare -gi MIN_VIDEO_INDEX_VALUE=1
  declare -gi MIN_IOMMU_GROUP_ID=0

  declare -g LOG_EXTENSION=".log"
  declare -g XML_EXTENSION=".xml"
  declare -g ETC_PATH="/usr/local/etc/"

  declare -g ARGUMENT_MATCH_GROUP="-g"
  declare -g OPTION_ALL="all"

  declare -ga INPUT_LIST=()

  declare -gA INPUT_DICT=(
    ["MATCH_GROUP"]=false
    ["MATCH_GROUP_LIST"]=""
    ["MATCH_HOST"]=false
    ["MATCH_MAKE"]=false
    ["MATCH_MAKE_LIST"]=""
    ["MATCH_NAME"]=false
    ["MATCH_NAME_LIST"]=""
    ["MATCH_TYPE"]=false
    ["MATCH_TYPE_LIST"]=""
    ["MATCH_VIDEO"]=false
    ["MATCH_VIDEO_LIST"]=""
    ["UNMATCH_GROUP"]=false
    ["UNMATCH_GROUP_LIST"]=""
    ["UNMATCH_HOST"]=false
    ["UNMATCH_MAKE"]=false
    ["UNMATCH_MAKE_LIST"]=""
    ["UNMATCH_NAME"]=false
    ["UNMATCH_NAME_LIST"]=""
    ["UNMATCH_TYPE"]=false
    ["UNMATCH_TYPE_LIST"]=""
    ["UNMATCH_VIDEO"]=""
    ["UNMATCH_VIDEO_LIST"]=""
    ["VERBOSE_DOUBLE"]=false
    ["VERBOSE_SINGLE"]=false
    ["XML_FILE"]="${ETC_PATH}${SCRIPT_NAME}${XML_EXTENSION}"
    ["XML_READ"]=false
    ["XML_WRITE"]=false
  )

  declare -gA INPUT_LIST_DICT=(
    ["MATCH_GROUP"]="MATCH_GROUP_LIST"
    ["MATCH_MAKE"]="MATCH_MAKE_LIST"
    ["MATCH_NAME"]="MATCH_NAME_LIST"
    ["MATCH_TYPE"]="MATCH_TYPE_LIST"
    ["MATCH_VIDEO"]="MATCH_VIDEO_LIST"
    ["UNMATCH_GROUP"]="UNMATCH_GROUP_LIST"
    ["UNMATCH_MAKE"]="UNMATCH_MAKE_LIST"
    ["UNMATCH_NAME"]="UNMATCH_MAKE_LIST"
    ["UNMATCH_TYPE"]="UNMATCH_TYPE_LIST"
    ["UNMATCH_VIDEO"]="UNMATCH_VIDEO_LIST"
  )

#
# sources (2/2)
#
  source \
    "${SOURCE_PATH}print_src" \
    "${SOURCE_PATH}" \
    "${SCRIPT_NAME}${LOG_EXTENSION}" \
    "${COLUMN_SIZE}"

#
# logic
#
  #
  # $1 : the input dictionary key as a string.
  # $2 : the value to append as a string.
  #
  function append_input_dict_list
  {
    if ! is_string "${1}"; then
      return 1
    fi

    if ! is_string "${2}"; then
      return 0
    fi

    local append_input_dict_list_key=${INPUT_LIST_DICT["${1}"]}

    if ! is_string "${append_input_dict_list_key}" \
      || ! is_string "${2}"; then
      return 1
    fi

    INPUT_DICT["${append_input_dict_list_key}"]+="${2},"
    return 0
  }

  #
  # $1 : the input dictionary key as a string.
  # $2 : the value to append as a string.
  #
  function append_numbered_input_list
  {
    if ! is_string "${1}"; then
      return 1
    fi

    if ! is_string "${2}"; then
      return 0
    fi

    local -i minimum_value=0

    if ! is_comma_delimited_list_of_positive_numbers "${2}" \
      || (
        [[ "${2: -2}" == "," ]] \
        && [[ "${2::-2}" -lt "${minimum_value}" ]] \
      ); then
      print_invalid_option_and_exit \
      "${2}"
    fi

    append_input_dict_list \
      "${1}" \
      "${2}"

    return 0
  }

  function get_comma_list_of_iommu_group_ids
  {
    seq \
      "${MIN_IOMMU_GROUP_ID}" \
      "${MAX_IOMMU_GROUP_ID}" \
    | tr \
      '\n' \
      ',' \
    | sed \
      's:,*$::'

    echo
  }

  #
  # $1 : the argument as a string.
  #
  function is_argument_or_empty_string
  {
    if ! is_string "${1}"; then
      return 0
    fi

    if [[ "${1}" == "---"* ]]; then
      return 1
    fi

    if [[ "${1}" == "-"* ]] \
      || [[ "${1}" == "--"* ]]; then
      return 0
    fi

    return 1
  }

  #
  # $1 : do match by keyword or fullword.
  # $2 : the boolean as a reference.
  # $2 : the list dictionary key as a string.
  # $3 : the do match boolean to match dictionary key as a string.
  # $5 : the do match flag as a boolean.
  # $6 : the comma delimited list of valid matches as a string.
  # $@ : the values to match as a list.
  #
  function is_matched_keyword
  {
    if ! is_boolean "${1}" \
      || ! is_variable "${2}" \
      || ! is_string "${3}"; then
      return 2
    fi

    local do_match_value_by_keyword="${1}"
    local -n reference_is_matched="${2}"

    if ! is_boolean "${reference_is_matched}"; then
      return 2
    fi

    local do_match_value=false
    local match_delim=""

    if is_dict "${3}"; then
      local -n matched_dictionary="${3}"

      if ! is_string "${4}" \
        || ! is_string "${5}"; then
        return 2
      fi

      do_match_value="${matched_dictionary["${4}"]}"
      match_delim="${matched_dictionary["${5}"]}"

      if ! is_boolean "${do_match_value}" \
        || ! is_string "${match_delim}"; then
        return 2
      fi

      shift

    else
      if ! is_boolean "${3}" \
        || ! is_string "${4}"; then
        return 2
      fi

      do_match_value="${3}"
      match_delim="${4}"
    fi

    shift
    shift
    shift
    shift
    local value_list="$@"

    for this_match in $( \
      echo "${match_delim}" \
        | sed "s/,/ /g"
    ); do

      if "${do_match_value_by_keyword}" \
        && [[ "${value_list,,}" =~ "${this_match,,}" ]]; then
        reference_is_matched=true
        return 0
      fi

      if ! "${do_match_value_by_keyword}" \
        && [[ "${value_list,,}" == "${this_match,,}" ]]; then
        reference_is_matched=true
        return 0
      fi

    done

    reference_is_matched=false
    return 1
  }

  function is_verbose
  {
    if ! "${INPUT_DICT["VERBOSE_SINGLE"]}"; then
      return 1
    fi

    return 0
  }

  function is_verbose_doubled
  {
    if ! "${INPUT_DICT["VERBOSE_DOUBLE"]}"; then
      return 1
    fi

    return 0
  }

  function match_all_groups
  {
    parse_this_argument \
      "${ARGUMENT_MATCH_GROUP}" \
      "${OPTION_ALL}"
  }

  #
  # $@ : the argument(s) as an array.
  #
  function parse_many_arguments
  {
    if ! parse_this_argument "${@}"; then
      return 1
    fi

    trim_input_lists
    return 0
  }

  #
  # $1 : the argument as a string.
  # $@ : the option(s) as an array.
  #
  function parse_this_argument
  {
    while true; do
      local -a this_input_list=()

      case "${1}" in
        "-g" | "--group" | "--groups" | "${ARGUMENT_MATCH_GROUP}" )
          local key="MATCH_GROUP"
          this_input_list=( "${key}" )
          shift

          if [[ "${1}" == "${OPTION_ALL}" ]]; then
            append_input_dict_list \
              "${key}" \
              "$( get_comma_list_of_iommu_group_ids ${1} )"

          else
            append_numbered_input_list \
              "${key}" \
              "${1}"
          fi
          ;;

        "-G" | "--graphics" )
          local key="MATCH_VIDEO"
          this_input_list=( "${key}" )
          shift

          append_numbered_input_list \
            "MATCH_GROUP" \
            "${1}"
          ;;

        "-H" | "--host" | "--hosts" )
          this_input_list=( "MATCH_HOST" )
          ;;

        "--ignore-group" | "--ignore-groups" )
          local key="UNMATCH_GROUP"
          this_input_list=( "${key}" )
          shift

          if [[ "${1}" == "${OPTION_ALL}" ]]; then
            append_input_dict_list \
              "${key}" \
              "$( get_comma_list_of_iommu_group_ids ${1} )"

          else
            append_numbered_input_list \
              "${key}" \
              "${1}"
          fi
          ;;

        "--ignore-name" | "--ignore-names" )
          local key="UNMATCH_NAME"
          this_input_list=( "${key}" )
          shift

          append_input_dict_list \
            "${key}" \
            "${1}"
          ;;

        "--ignore-type" | "--ignore-types" )
          local key="UNMATCH_TYPE"
          this_input_list=( "${key}" )
          shift

          append_input_dict_list \
            "${key}" \
            "${1}"
          ;;

        "--ignore-vendor" | "--ignore-vendors" )
          local key="UNMATCH_MAKE"
          this_input_list=( "${key}" )
          shift

          append_input_dict_list \
            "${key}" \
            "${1}"
          ;;

        "-n" | "--name" | "--names" )
          local key="MATCH_NAME"
          this_input_list=( "${key}" )
          shift

          append_input_dict_list \
            "${key}" \
            "${1}"
          ;;

        "-p" | "--pci" | "--pcie" )
          this_input_list=( "UNMATCH_HOST" )
          ;;

        "-t" | "--type" | "--types" )
          local key="MATCH_TYPE"
          this_input_list=( "${key}" )
          shift

          append_input_dict_list \
            "${key}" \
            "${1}"
          ;;

        "-V" | "--vendor" | "--vendors" )
          local key="MATCH_MAKE"
          this_input_list=( "${key}" )
          shift

          append_input_dict_list \
            "${key}" \
            "${1}"
          ;;

        "-v" | "--verbose" )
          INPUT_DICT["VERBOSE_SINGLE"]=true
          INPUT_DICT["VERBOSE_DOUBLE"]=false
          ;;

        "-vv" )
          INPUT_DICT["VERBOSE_SINGLE"]=true
          INPUT_DICT["VERBOSE_DOUBLE"]=true
          ;;

        #
        # TODO: fix XML support before enabling this.
        #

        "--x" | "--xml" )
          shift
          continue  # TODO: remove this line when XML is fixed

          case "${1,,}" in
            "import" )
            this_input_list=( "XML_READ" )
            ;;

            "export" )
            this_input_list=( "XML_WRITE" )
            ;;

            * )
            print_invalid_option_and_exit \
              "${1}"
            ;;
          esac

          shift

          if is_string "${1}"; then
            INPUT_DICT["XML_FILE"]="${1}"
          fi

          set_sources
          ;;

        "" )
          return 0
          ;;

        "-h" | "--help" )
          INPUT_DICT["VERBOSE_SINGLE"]=true
          print_usage
          exit 2
          ;;

        * )
          print_invalid_argument "${1}"
          return 1
          ;;
      esac

      for this_input in "${this_input_list[@]}"; do
        INPUT_DICT["${this_input}"]=true
        INPUT_LIST+=( "${this_input}" )

      done

      shift
    done

    return 0
  }

  #
  # $@ : the argumen(s) as an array.
  #
  function print_invalid_argument
  {
    if ! is_verbose; then
      return 1
    fi

    local message="Error: Invalid argument(s) specified."

    if is_string "${@}"; then
      message="${message::-1}: '${@}'"
    fi

    print_and_log_output "${message}"
    print_usage
    return 0
  }

  #
  # $1 : the option as a string.
  #
  function print_invalid_option
  {
    if ! is_verbose; then
      return 1
    fi

    local message="Error: Invalid option specified."

    if is_string "${1}"; then
      message="${message::-1}: '${1}'"
    fi

    print_and_log_output "${message}"
    return 1
  }

  #
  # $1 : the option as a string.
  #
  function print_invalid_option_and_exit
  {
    if ! is_verbose; then
      exit 1
    fi

    local message="Error: Invalid option specified."

    if is_string "${1}"; then
      message="${message::-1}: '${1}'"
    fi

    print_and_log_output "${message}"
    print_usage
    exit 1
  }

  function print_usage
  {
    if ! is_verbose; then
      return 0
    fi

    local -i column_prefix_count=28

    echo -e "Usage:\t${SCRIPT_NAME} [ARGUMENTS]"

    wrap_text \
      false \
      false \
      false \
      0 \
      "${COLUMN_SIZE}" \
      "Parse, sort, and display hardware IDs and device drivers by IOMMU group(s)."

    wrap_text \
      false \
      false \
      false \
      0 \
      "${COLUMN_SIZE}" \
      "Version ${SCRIPT_VERSION}."

    echo
    echo -en "  -h, --help                "

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Print this help and exit."

    echo -en "  -v, --verbose             "

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Show more output including queries and IOMMU groups."

    echo -en "  -vv                       "

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Show all output."

    echo -en "  -g, --group=GROUPS        "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Match IOMMU group ID(s);"

    echo -en "$( get_repeated_space 28 )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "GROUPS is a comma delimited list of positive numbers."

    echo -en "  --ignore-group=GROUPS     "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Reverse match IOMMU group ID(s), overrides \"--group\";"

    echo -en "$( get_repeated_space 28 )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "GROUPS is a comma delimited list of positive numbers."

    echo -en "  -G, --graphics=INDEX      "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Match all IOMMU groups without a graphics device," \
      "and any IOMMU group (with a graphics device) whose INDEX matches the" \
      "expected INDEX value(s). INDEX is not an IOMMU group ID;"

    echo -en "$( get_repeated_space 28 )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "INDEX is a comma delimited list of postive non-zero numbers."

    echo -en "  -H, --host                "

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Match IOMMU groups with at least one (1) or more Host devices."

    echo -en "  -n, --name=NAME           "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Match IOMMU group(s) with device name;"

    echo -en "$( get_repeated_space 28 )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "NAME is a comma delimited list of text."

    echo -en "  --ignore-name=NAME        "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Match IOMMU group(s) without device name, overrides \"--name\";"

    echo -en "$( get_repeated_space 28 )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "NAME is a comma delimited list of text."

    echo -en "  -t, --type=TYPE           "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Match IOMMU group(s) with device type;"

    echo -en "$( get_repeated_space 28 )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "TYPE is a comma delimited list of text."

    echo -en "  --ignore-type=TYPE        "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Match IOMMU group(s) without device type, overrides \"--type\";"

    echo -en "$( get_repeated_space 28 )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "TYPE is a comma delimited list of text."

    echo -en "  -V, --vendor=VENDOR       "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Match IOMMU group(s) with device vendor;"

    echo -en "$( get_repeated_space 28 )"

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "VENDOR is a comma delimited list of text."

    echo -en "  --ignore-vendor=VENDOR    "

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "Match IOMMU group(s) without device vendor, overrides \"--vendor\";"

    echo -en "$( get_repeated_space 28 )"

    #
    # TODO: fix XML support before enabling this.
    #

    # echo -en "  -x, --xml, --xml=FILE     "

    # wrap_text \
    #   false \
    #   false \
    #   false \
    #   "${column_prefix_count}" \
    #   "${COLUMN_SIZE}" \
    #   "Query an XML file for device drivers should none be found or any devices" \
    #   "are binded to VFIO;"

    # echo -en "$( get_repeated_space 28 )"

    # wrap_text \
    #   false \
    #   false \
    #   true \
    #   "${column_prefix_count}" \
    #   "${COLUMN_SIZE}" \
    #   "FILE is the XML file name as text. Leave FILE empty to use default file"\
    #   "name (\"${INPUT_DICT["XML_FILE"]}\")."

    echo  # TODO: remove this line when XML support is complete.

    echo -e "Examples:"

    echo -en "  ${SCRIPT_NAME} " # do wrap_text for args here.

    column_prefix_count=$(( "${#SCRIPT_NAME}" + 3 ))

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "--graphics 2,3"

    echo -en "$( get_repeated_space 28 )"

    column_prefix_count=28
    text="Exclude the second and third matched IOMMU groups with graphics device(s). "
    text+="Standard output includes: comma-delimited lists of selected hardware IDs, "
    text+="drivers, and IOMMU group IDs."

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "${text}"

    echo
    echo -en "  ${SCRIPT_NAME} " # do wrap_text for args here.

    wrap_text \
      false \
      false \
      true \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "-vv --ignore-name ether --pcie"

    echo -en "$( get_repeated_space 28 )"

    column_prefix_count=28
    text="Match output of IOMMU groups with PCI/e devices, "
    text+="and exclude any wired ethernet devices. "
    text+="Verbose output includes: comma-delimited lists of selected hardware IDs, "
    text+="drivers, and IOMMU group IDs; details of all IOMMU groups; and telemetry."

    wrap_text \
      false \
      false \
      false \
      "${column_prefix_count}" \
      "${COLUMN_SIZE}" \
      "${text}"
  }

  function trim_input_lists
  {
    INPUT_DICT["MATCH_GROUP_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["MATCH_GROUP_LIST"]}" \
    )"

    INPUT_DICT["UNMATCH_GROUP_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["UNMATCH_GROUP_LIST"]}" \
    )"

    INPUT_DICT["MATCH_MAKE_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["MATCH_MAKE_LIST"]}" \
    )"

    INPUT_DICT["UNMATCH_MAKE_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["UNMATCH_MAKE_LIST"]}" \
    )"

    INPUT_DICT["MATCH_NAME_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["MATCH_NAME_LIST"]}" \
    )"

    INPUT_DICT["UNMATCH_NAME_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["UNMATCH_NAME_LIST"]}" \
    )"

    INPUT_DICT["MATCH_TYPE_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["MATCH_TYPE_LIST"]}" \
    )"

    INPUT_DICT["UNMATCH_TYPE_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["UNMATCH_TYPE_LIST"]}" \
    )"

    INPUT_DICT["MATCH_VIDEO_LIST"]="$( \
      truncate_index_from_delimited_list \
        -1 \
        "${INPUT_DICT["MATCH_VIDEO_LIST"]}" \
    )"

    return 0
  }

  function verify_iommu_groups
  {
    local warning="Error: Invalid IOMMU group ID(s) specified. Please enter a "
    warning+="number between '${MIN_IOMMU_GROUP_ID}' and '${MAX_IOMMU_GROUP_ID}'."

    if ! is_comma_delimited_list_of_positive_numbers \
        "${INPUT_DICT["MATCH_GROUP_LIST"]}" \
      || [[ "$( \
        echo "${INPUT_DICT["MATCH_GROUP_LIST"]}" \
          | sort --reverse --version-sort \
          | head --lines 1 \
        )" -gt "${MAX_IOMMU_GROUP_ID}" ]]; then
      print_and_log_output "${warning}"
      return 1
    fi

    if ! is_comma_delimited_list_of_positive_numbers \
        "${INPUT_DICT["UNMATCH_GROUP_LIST"]}" \
      || [[ "$( \
        echo "${INPUT_DICT["UNMATCH_GROUP_LIST"]}" \
          | sort --reverse --version-sort \
          | head --lines 1 \
        )" -gt "${MAX_IOMMU_GROUP_ID}" ]]; then
      print_and_log_output "${warning}"
      return 1
    fi
  }